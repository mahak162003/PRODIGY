
pip install transformers datasets torch
pip install --upgrade pyarrow
!pip uninstall pyarrow datasets -y
!pip install pyarrow datasets
import subprocess

subprocess.check_call(["pip", "uninstall", "pyarrow", "datasets", "-y"])
subprocess.check_call(["pip", "install", "pyarrow", "datasets"])
import torch
from transformers import GPT2Tokenizer, GPT2LMHeadModel
import datasets
import transformers

print("PyTorch version:", torch._version_)
print("Transformers version:", transformers._version_)
print("Datasets version:", datasets._version_)
import torch
from transformers import GPT2Tokenizer, GPT2LMHeadModel, TextDataset, DataCollatorForLanguageModeling, Trainer, TrainingArguments

# Load the tokenizer and model
model_name = "gpt2"
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Prepare the dataset
def load_dataset(file_path, tokenizer, block_size=128):
    dataset = TextDataset(
        tokenizer=tokenizer,
        file_path=file_path,
        block_size=block_size
    )
    return dataset

def main():
    # Path to your custom dataset
    train_file_path = "path_to_your_dataset.txt"

    # Load the dataset
    train_dataset = load_dataset(train_file_path, tokenizer)

    # Data collator
    data_collator = DataCollatorForLanguageModeling(
        tokenizer=tokenizer, mlm=False
    )

    # Training arguments
    training_args = TrainingArguments(
        output_dir="./gpt2-finetuned",
        overwrite_output_dir=True,
        num_train_epochs=3,
        per_device_train_batch_size=2,
        save_steps=10_000,
        save_total_limit=2,
        logging_dir="./logs",
    )

    # Trainer
    trainer = Trainer(
        model=model,
        args=training_args,
        data_collator=data_collator,
        train_dataset=train_dataset,
    )

    # Fine-tune the model
    trainer.train()

    # Save the model
    trainer.save_model("./gpt2-finetuned")
    tokenizer.save_pretrained("./gpt2-finetuned")

def main():
    # Your main function code here
    print("Running the main function.")

if _name_ == "_main_":
    main()
